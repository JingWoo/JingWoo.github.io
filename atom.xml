<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jingwoo.github.io</id>
    <title>WuJing&apos;s Blog</title>
    <updated>2020-07-18T07:56:58.239Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jingwoo.github.io"/>
    <link rel="self" href="https://jingwoo.github.io/atom.xml"/>
    <subtitle>总在夕阳落下，沉眠之中，又会迎来另一片晨阳.</subtitle>
    <logo>https://jingwoo.github.io/images/avatar.png</logo>
    <icon>https://jingwoo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, WuJing&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Issue Template]]></title>
        <id>https://jingwoo.github.io/post/issue-template/</id>
        <link href="https://jingwoo.github.io/post/issue-template/">
        </link>
        <updated>2020-07-18T07:53:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="代码review-issue模板">代码Review issue模板</h2>
<hr>
<h3 id="code-reviewthere-is-a-logic-error-in-the-remove_name-function-of-the-rootfs_storec-file">【Code Review】There is a logic error in the remove_name function of the rootfs_store.c file</h3>
<h3 id="isulad-versionbranch">iSulad version/branch</h3>
<p>the latest version, implement_image</p>
<h3 id="code-segment">Code Segment</h3>
<pre><code class="language-c">static int remove_name(cntrootfs_t *cntr, const char *name)
{
	...
    for (i = 0; i &lt; cntr-&gt;srootfs-&gt;names_len; i++) {
        if (strcmp(cntr-&gt;srootfs-&gt;names[i], name) == 0) {
            count++;
        }
    }

    new_size = (cntr-&gt;srootfs-&gt;names_len - count) * sizeof(char *);
    tmp_names = (char **)util_common_calloc_s(new_size);
    if (tmp_names == NULL) {
        ERROR(&quot;Out of memory&quot;);
        return -1;
    }
    ...
 }
</code></pre>
<h3 id="problem-analysis">Problem Analysis</h3>
<p>When the name of the container is unique and the same as the name of the input parameter, the program will exit abnormally and there is a memory leak.</p>
<h3 id="workaround">Workaround</h3>
<p>When the name of the container is unique and the same as the name of the input parameter, the memory should be released directly, and the length is set to 0</p>
<pre><code class="language-c">static int remove_name(cntrootfs_t *cntr, const char *name)
{
	...
    for (i = 0; i &lt; cntr-&gt;srootfs-&gt;names_len; i++) {
        if (strcmp(cntr-&gt;srootfs-&gt;names[i], name) == 0) {
            count++;
        }
    }
    
	if (cntr-&gt;srootfs-&gt;names_len == count) {
        util_free_array_by_len(cntr-&gt;srootfs-&gt;names, cntr-&gt;srootfs-&gt;names_len);
        cntr-&gt;srootfs-&gt;names = NULL;
        cntr-&gt;srootfs-&gt;names_len = 0;
        return 0;
    }
    
    new_size = (cntr-&gt;srootfs-&gt;names_len - count) * sizeof(char *);
    tmp_names = (char **)util_common_calloc_s(new_size);
    if (tmp_names == NULL) {
        ERROR(&quot;Out of memory&quot;);
        return -1;
    }
    ...
 }
</code></pre>
<h3 id="代码检视rootfs_storec文件的remove_name函数存在逻辑错误">【代码检视】rootfs_store.c文件的remove_name函数存在逻辑错误</h3>
<h3 id="isulad-版本及分支">iSulad 版本及分支</h3>
<p>the latest version, implement_image</p>
<h3 id="代码片段">代码片段</h3>
<pre><code class="language-c">static int remove_name(cntrootfs_t *cntr, const char *name)
{
	...
    for (i = 0; i &lt; cntr-&gt;srootfs-&gt;names_len; i++) {
        if (strcmp(cntr-&gt;srootfs-&gt;names[i], name) == 0) {
            count++;
        }
    }

    new_size = (cntr-&gt;srootfs-&gt;names_len - count) * sizeof(char *);
    tmp_names = (char **)util_common_calloc_s(new_size);
    if (tmp_names == NULL) {
        ERROR(&quot;Out of memory&quot;);
        return -1;
    }
    ...
 }
</code></pre>
<h3 id="问题分析">问题分析</h3>
<p>当容器的names唯一且与入参name相同时，程序会异常退出且有内存泄漏。</p>
<h3 id="解决方法">解决方法</h3>
<p>当容器的names唯一且与入参name相同时，应该直接释放内存，且把长度设置成0</p>
<pre><code class="language-c">static int remove_name(cntrootfs_t *cntr, const char *name)
{
	...
    for (i = 0; i &lt; cntr-&gt;srootfs-&gt;names_len; i++) {
        if (strcmp(cntr-&gt;srootfs-&gt;names[i], name) == 0) {
            count++;
        }
    }
    
	if (cntr-&gt;srootfs-&gt;names_len == count) {
        util_free_array_by_len(cntr-&gt;srootfs-&gt;names, cntr-&gt;srootfs-&gt;names_len);
        cntr-&gt;srootfs-&gt;names = NULL;
        cntr-&gt;srootfs-&gt;names_len = 0;
        return 0;
    }
    
    new_size = (cntr-&gt;srootfs-&gt;names_len - count) * sizeof(char *);
    tmp_names = (char **)util_common_calloc_s(new_size);
    if (tmp_names == NULL) {
        ERROR(&quot;Out of memory&quot;);
        return -1;
    }
    ...
 }
</code></pre>
<h2 id="功能测试-issue模板">功能测试  issue模板</h2>
<hr>
<h3 id="function-testsegmentation-fault-from-isula-inspect">【Function Test】Segmentation fault from isula inspect</h3>
<h3 id="what-version-of-isulad-and-which-branch-are-you-using">What version of  iSulad  and which branch are you using?</h3>
<p>Client:<br>
Version:      2.0.2<br>
Git commit:   259d4126b9cfbf1ffce64ba3d65cc2de98298f76<br>
Built:        2020-06-22T15:30:09.183997400+08:00</p>
<p>Server:<br>
Version:      2.0.2<br>
Git commit:   259d4126b9cfbf1ffce64ba3d65cc2de98298f76<br>
Built:        2020-06-22T15:30:09.183997400+08:00</p>
<p>​       master &amp;&amp; stable-2.0 &amp;&amp; implement_image</p>
<h3 id="what-operating-system-linux-windows-and-version-what-compiler-are-you-using">What operating system (Linux, Windows,...) and version?  What compiler are you using ?</h3>
<p>Linux, fedora 32, gcc version 10.1.1</p>
<h3 id="what-did-you-do-and-what-did-you-see">What did you do and what did you see ?</h3>
<p>When executing command to inspect a empty object, a coredump occurs in the client program.</p>
<pre><code>➜  iSulad git:(implement_image) ✗ isula inspect &quot;&quot;
Segmentation fault (core dumpd)
</code></pre>
<h3 id="what-did-you-expect-to-see">What did you expect to see?</h3>
<p>The program does not cause coredump, and it prompts that the inspection failed. eg：</p>
<pre><code class="language-bash">➜  iSulad git:(implement_image) ✗ isula inspect  &quot;&quot;
[]
Inspect error: No such object:
</code></pre>
<h3 id="what-did-you-do-and-what-did-you-see-2">What did you do and what did you see ?</h3>
<p>When executing command to inspect a empty object, a coredump occurs in the client program.</p>
<h3 id="功能测试isula-inspect-段错误">【功能测试】isula inspect  段错误</h3>
<h3 id="isula版本信息及项目分支">iSula版本信息及项目分支</h3>
<p>Client:<br>
Version:      2.0.2<br>
Git commit:   259d4126b9cfbf1ffce64ba3d65cc2de98298f76<br>
Built:        2020-06-22T15:30:09.183997400+08:00</p>
<p>Server:<br>
Version:      2.0.2<br>
Git commit:   259d4126b9cfbf1ffce64ba3d65cc2de98298f76<br>
Built:        2020-06-22T15:30:09.183997400+08:00</p>
<p>​       master &amp;&amp; stable-2.0 &amp;&amp; implement_image</p>
<h3 id="操作系统版本及编译器版本">操作系统版本及编译器版本</h3>
<p>Linux, fedora 32, gcc version 10.1.1</p>
<h3 id="问题是如何引起的重现步骤是什么问题现象是什么">问题是如何引起的？重现步骤是什么？问题现象是什么？</h3>
<p>异常测试时，inspect空字符串会导致客户端程序coredump。</p>
<pre><code>➜  iSulad git:(implement_image) ✗ isula inspect &quot;&quot;
Segmentation fault (core dumpd)
</code></pre>
<h3 id="预期结果应该是什么">预期结果应该是什么？</h3>
<p>程序不能出现coredump，且应该有清晰的错误提示. 例如：</p>
<pre><code class="language-bash">➜  iSulad git:(implement_image) ✗ isula inspect  &quot;&quot;
[]
Inspect error: No such object:
</code></pre>
<h2 id="开发者测试-issue模板">开发者测试 issue模板</h2>
<hr>
<blockquote>
<p>c</p>
</blockquote>
<h3 id="开发者测试-升级场景加载本地已存在的v1镜像导致isulad-coredump">【开发者测试】 升级场景加载本地已存在的v1镜像导致iSulad coredump</h3>
<h3 id="用例描述">用例描述</h3>
<blockquote>
<p>测试套： StorageImagesCompatibilityUnitTest</p>
<p>用例名：test_load_v1_image</p>
</blockquote>
<pre><code class="language-c++">TEST_F(StorageImagesCompatibilityUnitTest, test_load_v1_image)
{
    ...
    opts.driver_name = strdup(&quot;overlay&quot;);
    ASSERT_EQ(image_store_init(&amp;opts), 0); --- core dumpd
    free(opts.storage_root);
	...
}
</code></pre>
<h3 id="环境">环境:</h3>
<blockquote>
<h4 id="操作系统编译器">操作系统/编译器</h4>
<blockquote>
<p>Linux, fedora 32, gcc version 10.1.1</p>
</blockquote>
<h4 id="isulad版本">iSulad版本</h4>
<blockquote>
<p>Client:<br>
Version:      2.0.2<br>
Git commit:   259d4126b9cfbf1ffce64ba3d65cc2de98298f76<br>
Built:        2020-06-22T15:30:09.183997400+08:00</p>
</blockquote>
<blockquote>
<p>Server:<br>
Version:      2.0.2<br>
Git commit:   259d4126b9cfbf1ffce64ba3d65cc2de98298f76<br>
Built:        2020-06-22T15:30:09.183997400+08:00</p>
</blockquote>
<h4 id="开发分支">开发分支</h4>
<blockquote>
<p>implement_image</p>
</blockquote>
</blockquote>
<h3 id="根因分析">根因分析</h3>
<blockquote>
<p>从layer store获取的层信息存在多个层没有parent(正常情况下只有一个层没有)</p>
</blockquote>
<h3 id="解决办法">解决办法</h3>
<blockquote>
<p>对外部模块获取的层信息进行严格校验</p>
<p>MR： https://gitee.com/openeuler/iSulad/commit/99a42f7d1c60a2140d6b3da3dd8d23196a68bca5</p>
</blockquote>
<hr>
<h3 id="dtfunction-testcode-review">[DT/Function Test/Code Review]</h3>
<h3 id="what-version-of-isulad-and-which-branch-are-you-using-2">What version of  iSulad  and which branch are you using?</h3>
<h3 id="what-operating-system-linux-windows-and-version-what-compiler-are-you-using-2">What operating system (Linux, Windows,...) and version?  What compiler are you using ?</h3>
<h3 id="what-did-you-do-and-what-did-you-see-3">What did you do and what did you see ?</h3>
<h3 id="what-did-you-expect-to-see-2">What did you expect to see?</h3>
<h3 id="开发者测试功能测试代码检视">【开发者测试/功能测试/代码检视】</h3>
<h3 id="isula版本信息及项目分支-2">iSula版本信息及项目分支</h3>
<h3 id="操作系统版本及编译器版本-2">操作系统版本及编译器版本</h3>
<h3 id="问题描述及重现步骤">问题描述及重现步骤</h3>
<h3 id="预期结果">预期结果</h3>
<h1 id="pull-request-template">Pull Request Template</h1>
<h3 id="description">Description</h3>
<h3 id="related-issue">Related Issue</h3>
<h3 id="type-of-change">Type of change</h3>
<ul>
<li>Bug Fix</li>
<li>New Feature</li>
<li>Breaking Change</li>
<li>Code Refactoring</li>
<li>Interface Change</li>
<li>Documentation Update</li>
</ul>
<h3 id="test-case">Test Case</h3>
<h3 id="validation-report">Validation Report</h3>
<ul>
<li></li>
</ul>
<h2 id="how-has-this-been-tested">How Has This Been Tested?</h2>
<p>Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration</p>
<ul>
<li>Test A</li>
<li>Test B</li>
</ul>
<p><strong>Test Configuration</strong>:</p>
<ul>
<li>
<p>Firmware version:</p>
</li>
<li>
<p>Hardware:</p>
</li>
<li>
<p>Toolchain:</p>
</li>
<li>
<p>SDK:</p>
</li>
<li></li>
</ul>
<h3 id="描述">描述</h3>
<h3 id="关联issue">关联issue</h3>
<h3 id="修改类型">修改类型</h3>
<ul>
<li>问题修复</li>
<li>新特性开发</li>
<li>代码重构</li>
<li>接口变更</li>
<li>文档更新</li>
</ul>
<h3 id="测试用例">测试用例</h3>
<h3 id="验证报告">验证报告</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Introduction to SELinux]]></title>
        <id>https://jingwoo.github.io/post/introduction-to-selinux/</id>
        <link href="https://jingwoo.github.io/post/introduction-to-selinux/">
        </link>
        <updated>2020-07-17T07:55:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="selinux-overview">SELinux Overview</h2>
<figure data-type="image" tabindex="1"><img src="https://jingwoo.github.io/post-images/1594972737178.jpg" alt="" loading="lazy"></figure>
<p><em>Security-Enhanced Linux</em> (SELinux) is a security architecture integrated into the 2.6.<em><code>x</code></em> kernel using the <em>Linux Security Modules</em> (LSM). It is a project of the United States National Security Agency (NSA) and the SELinux community.</p>
<p>Security Enhanced Linux (SELinux) provides an additional layer of system security. SELinux fundamentally answers the question: &quot;May <subject> do <action> to <object>&quot;, for example: &quot;May a web server access files in users' home directories?&quot;. All processes and files are labeled. SELinux policy rules define how processes interact with files, as well as how processes interact with each other.</p>
<h2 id="selinux-architectrue">SELinux  Architectrue</h2>
<p>SELinux is a Linux Security Module (LSM) that is built into the Linux kernel. The SELinux subsystem in the kernel is driven by a security policy which is controlled by the administrator and loaded at boot. All security-relevant, kernel-level access operations on the system are intercepted by SELinux and  examined in the context of the loaded security policy. If the loaded policy allows the operation, it<br>
continues. Otherwise, the operation is blocked and the process receives an error. SELinux decisions, such as allowing or disallowing access, are cached. This cache is known as the Access Vector Cache (AVC). When using these cached decisions, SELinux policy rules need to be checked less, which increases performance. Remember that SELinux policy rules have no effect if DAC rules deny access first.</p>
<h2 id="selinux-package">SELinux Package</h2>
<p><em>policycoreutils</em>: provides utilities, such as <code>semanage</code>, <code>restorecon</code>, <code>audit2allow</code>, <code>semodule</code>, <code>load_policy</code>, and <code>setsebool</code>, for operating and managing SELinux.</p>
<p><em>selinux-policy</em>: provides the SELinux Reference Policy. Provides a basic directory structure, the selinux-policy.conf file, and RPM<br>
macros</p>
<p><em>selinux-policy-targeted</em>: provides the SELinux targeted policy</p>
<p><em>selinux-policy-targeted</em>: provides the SELinux targeted policy.</p>
<p><em>libselinux</em>: provides an API for SELinux applications.</p>
<p><em>libselinux-utils</em>: provides the avcstat, getenforce, getsebool, matchpathcon, selinuxconlist, selinuxdefcon, selinuxenabled, and setenforce utilities.</p>
<p><em>libselinux-python</em>: provides Python bindings for developing SELinux applications.</p>
<p><em>selinux-policy-devel</em>: provides utilities for creating a custom SELinux policy and policy modules.</p>
<p><em>selinux-policy-doc</em>: provides manual pages that describe how to configure SELinux altogether with various services.</p>
<p><em>selinux-policy-mls</em>: provides the MLS (Multi-Level Security) SELinux policy. setroubleshoot-server translates denial messages, produced when access is denied by SELinux, into detailed descriptions that can be viewed with the sealert utility, also provided in this<br>
package.</p>
<p><em>setools-console</em>: provides the Tresys Technology SETools distribution , a number of utilities and libraries for analyzing and querying policy, audit log monitoring and reporting, and file context management. The setools package is a meta-package for SETools. The setools-gui package provides the apol and seaudit utilities. The setools-console package provides the sechecker, sediff, seinfo, sesearch, and findcon command-line utilities. See the Tresys Technology SETools page for information about these utilities. Note that setools and setools-gui packages are available only when the Red Hat Network Optional channel is enabled. For further<br>
information, see Scope of Coverage Details. mcstrans translates levels, such as s0-s0:c0.c1023, to a form that is easier to read, such as SystemLow-SystemHigh.</p>
<p><em>setools</em>, <em>setools-gui</em>, and <em>setools-console</em>: these packages provide the <a href="http://oss.tresys.com/projects/setools">Tresys Technology SETools distribution</a>, a number of tools and libraries for analyzing and querying policy, audit log monitoring and reporting, and file context management.</p>
<p><em>libselinux-utils</em>: provides the <code>avcstat</code>, <code>getenforce</code>, <code>getsebool</code>, <code>matchpathcon</code>, <code>selinuxconlist</code>, <code>selinuxdefcon</code>, <code>selinuxenabled</code>, <code>setenforce</code>, <code>togglesebool</code> tools.</p>
<p><em>mcstrans</em>: translates levels, such as <code>s0-s0:c0.c1023</code>, to an easier to read form, such as <code>SystemLow-SystemHigh</code>. This package is not installed by default.</p>
<p><em>policycoreutils-python</em>: provides utilities such as semanage, audit2allow, audit2why, and chcat, for operating and managing SELinux.</p>
<p><em>policycoreutils-gui</em>: provides system-config-selinux, a graphical utility for managing SELinux.</p>
<h2 id="selinux-states-and-modes">SELinux States And Modes</h2>
<p>SELinux can run in one of three modes: disabled, permissive, or enforcing.</p>
<p>Disabled mode is strongly discouraged; not only does the system avoid enforcing the SELinux policy, it also avoids labeling any persistent objects such as files, making it difficult to enable SELinux in the future.</p>
<p>In permissive mode, the system acts as if SELinux is enforcing the loaded security policy, including labeling objects and emitting access denial entries in the logs, but it does not actually deny any operations. While not recommended for production systems, permissive mode can be helpful for SELinux policy development.</p>
<p>Enforcing mode is the default, and recommended, mode of operation; in enforcing mode SELinux operates normally, enforcing the loaded security policy on the entire system.</p>
<pre><code class="language-bash">$ cat /etc/selinux/config
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
# enforcing - SELinux security policy is enforced.
# permissive - SELinux prints warnings instead of enforcing.
# disabled - No SELinux policy is loaded.
SELINUX=enforcing
# SELINUXTYPE= can take one of these two values:
# default - equivalent to the old strict and targeted policies
# mls     - Multi-Level Security (for military and educational use)
# src     - Custom policy built from source
SELINUXTYPE=default

# SETLOCALDEFS= Check local definition changes
SETLOCALDEFS=0
</code></pre>
<p>Use the <code>setenforce</code> utility to change between enforcing and permissive mode.</p>
<pre><code class="language-bash"># Use Enforcing or 1 to put SELinux in enforcing mode.
# Use Permissive or 0 to put SELinux in permissive mode.
$ setenforce [Enforcing|Permissive|1|0]
</code></pre>
<p>Use the <code>getenforce</code> or <code>sestatus</code> commands to check in which mode SELinux is running. The <code>getenforce</code> command returns <code>Enforcing</code>, <code>Permissive</code>, or <code>Disabled</code>.</p>
<pre><code class="language-bash">$ getenforce
</code></pre>
<pre><code class="language-bash">$ sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Memory protection checking:     actual (secure)
Max kernel policy version:      32
</code></pre>
<p>Set individual domains to permissive mode while the system runs in enforcing mode.</p>
<pre><code class="language-bash">semanage permissive -a container_t
</code></pre>
<h2 id="enabledisable-selinux-on-linux">Enable/Disable SELinux On Linux</h2>
<h3 id="ubuntu">Ubuntu</h3>
<pre><code class="language-bash">## Enable SELinux
# Install SELinux package
$ sudo apt install policycoreutils selinux-utils selinux-basics
# Activate SELinux
$ sudo selinux-activate
# Set SELinux to enforcing mode
$ sudo selinux-config-enforcing
# Reboot system
$ reboot
# Check SELinux states
$ sestatus

## Disable SELinux
# set states
sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled&quot; /etc/selinux/config
# reboot system
$ reboot
</code></pre>
<h3 id="fedora">Fedora</h3>
<pre><code class="language-bash">## Enable SELinux
# Install SELinux package
$ sudo dnf install policycoreutils selinux-policy setools setools-console libselinux-utils setroubleshoot selinux-policy-targeted selinux-policy libselinux libselinux-python policycoreutils-python
# set states
$ vim /etc/selinux/config
	# This file controls the state of SELinux on the system.
    # SELINUX= can take one of these three values:
    #       enforcing - SELinux security policy is enforced.
    #       permissive - SELinux prints warnings instead of enforcing.
    #       disabled - No SELinux policy is loaded.
    SELINUX=pass:quotes[*enforcing*]
    # SELINUXTYPE= can take one of these two values:
    #       targeted - Targeted processes are protected,
    #       mls - Multi Level Security protection.
    SELINUXTYPE=targeted
# reboot system
$ reboot

## Disable SELinux
# set states
sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled&quot; /etc/selinux/config
# reboot system
$ reboot
</code></pre>
<h2 id="selinux-context">SELinux Context</h2>
<p>Processes and files are labeled with an SELinux context that contains additional information, such as an SELinux user, role, type, and, optionally, a level. When running SELinux, all of this information is used to make access control decisions.  SELinux provides a combination of RoleBased Access Control (RBAC), Type Enforcement (TE), and, optionally, Multi-Level Security (MLS).</p>
<p>SELinux contexts follow the SELinux user:role:type:level syntax.</p>
<pre><code class="language-bash">$ ls -Z /etc/adjtime
-rw-r--r--. root root system_u:object_r:adjtime_t:s0   /etc/adjtime
$ stat -c &quot;%C&quot; /etc/adjtime
system_u:object_r:adjtime_t:s0
</code></pre>
<h3 id="selinux-user">SELinux user</h3>
<p>The SELinux user identity is an identity known to the policy that is authorized for a specific set of<br>
roles, and for a specific MLS/MCS range.</p>
<pre><code class="language-bash">$ semanage login -l
Login Name           SELinux User         MLS/MCS Range        Service
__default__          unconfined_u         s0-s0:c0.c1023       *
root                 unconfined_u         s0-s0:c0.c1023       *
$ id -Z
unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
$ seinfo -u
Users: 6
   root
   staff_u
   sysadm_u
   system_u
   unconfined_u
   user_u
</code></pre>
<h3 id="selinux-role">SELinux Role</h3>
<p>Part of SELinux is the Role-Based Access Control (RBAC) security model. The role is an attribute of RBAC. SELinux users are authorized for roles, and roles are authorized for domains. The role serves as an intermediary between domains and SELinux users. The roles that can be entered determine which domains can be entered; ultimately, this controls which object types can be accessed. This helps reduce vulnerability to privilege escalation attacks.</p>
<p>To list all available roles, enter the following command:</p>
<pre><code class="language-bash">$ seinfo -r
</code></pre>
<h3 id="selinux-type">SELinux Type</h3>
<p>The type is an attribute of Type Enforcement. The type defines a domain for processes, and a type for files. SELinux policy rules define how types can access each other, whether it be a domain accessing a type, or a domain accessing another domain. Access is only allowed if a specific SELinux policy rule exists that allows it.</p>
<h3 id="selinux-level">SELinux Level</h3>
<p>The level is an attribute of MLS and MCS. An MLS range is a pair of levels, written as lowlevelhighlevel if the levels differ, or lowlevel if the levels are identical ( s0-s0 is the same as s0). Each level is a sensitivity-category pair, with categories being optional. If there are categories, the level is written as sensitivity:category-set. If there are no categories, it is written as sensitivity. If the category set is a contiguous series, it can be abbreviated. For example, c0.c3 is the same as c0,c1,c2,c3. The /etc/selinux/targeted/setrans.conf file maps levels (s0:c0) to human-readable form (that is CompanyConfidential). In Red Hat Enterprise Linux, targeted policy enforces MCS, and in MCS, there is just one sensitivity, s0. MCS in Red Hat Enterprise Linux supports 1024 different categories: c0 through to c1023. s0-s0:c0.c1023 is sensitivity s0 and authorized for all categories.</p>
<h2 id="selinux-relabel-file">SELinux  Relabel File</h2>
<p>The <code>chcon</code> command changes the SELinux context for files  (Temporary Changes )</p>
<pre><code class="language-bash">chcon -R -t container_ro_file_t /var/lib/isulad/storage/overlay2
</code></pre>
<p><code>restorecon</code> command reads the files in the <code>/etc/selinux/targeted/contexts/files/</code> directory, to see which SELinux context files should have.</p>
<pre><code class="language-bash">$ restorecon -R -v /var/lib/isulad/storage/overlay2
restorecon reset /var/lib/isulad/storage/overlay2 context unconfined_u:object_r:container_ro_file_t:s0-
&gt;system_u:object_r:var_lib_t:s0
</code></pre>
<p>The <code>semanage fcontext</code> command is used to change the SELinux context of files.    (Persistent Changes )</p>
<pre><code class="language-bash">$ sudo semanage fcontext -a options file-name|directory-name
</code></pre>
<p>Use the ·restorecon· utility to apply the context changes:</p>
<pre><code class="language-bash">$ sudo restorecon -v file-name|directory-name
</code></pre>
<p>Deleting an added Context</p>
<pre><code class="language-bash">$ sudo semanage fcontext -d file-name|directory-name
</code></pre>
<h2 id="checking-the-default-selinux-context">Checking the Default SELinux Context</h2>
<pre><code class="language-bash">$ chcon -R system_u:object_r:container_ro_file_t:s0 /var/lib/isulad/storage/overlay
$ matchpathcon -V /var/lib/isulad/storage/overlay
/var/lib/isulad/storage/overlay has context system_u:object_r:container_ro_file_t:s0, should be system_u:object_r:var_lib_t:s0
</code></pre>
<h2 id="selinux-context-process">SELinux Context Process</h2>
<p>Use the ps -eZ command to view the SELinux context for processes.</p>
<pre><code class="language-bash">$ ps -eZ | grep passwd
unconfined_u:unconfined_r:passwd_t:s0-s0:c0.c1023 13212 pts/1 00:00:00 passwd
</code></pre>
<h2 id="selinux-boolean">SELinux Boolean</h2>
<p>Booleans allow parts of SELinux policy to be changed at runtime, without any knowledge of SELinux<br>
policy writing. This allows changes, such as allowing services access to NFS volumes, without reloading<br>
or recompiling SELinux policy.</p>
<pre><code class="language-bash">$ semanage boolean -l
SELinux boolean                State  Default Description
allow_cvs_read_shadow          (off  ,  off)  Determine whether cvs can read shadow password files.
...
$ getsebool -a
allow_cvs_read_shadow-&gt;off
...
$ getsebool allow_cvs_read_shadow
allow_cvs_read_shadow-&gt;off
$ setsebool allow_cvs_read_shadow [on/off]
# setsebool -P boolean-name on, To make changes persistent across reboots

</code></pre>
<h2 id="selinux-information-gathering-tools">SELinux Information Gathering Tools</h2>
<pre><code class="language-bash">$ man seinfo
$ man sesearch
$ sesearch -A -s var_lib_t
allow file_type fs_t:filesystem associate;
allow file_type hugetlbfs_t:filesystem associate;
allow file_type noxattrfs:filesystem associate;
allow file_type ramfs_t:filesystem associate;
allow file_type tmp_t:filesystem associate;
allow file_type tmpfs_t:filesystem associate;
allow var_lib_t var_lib_t:filesystem associate;
</code></pre>
<p>To see which objects are labeled as type</p>
<pre><code class="language-bash">$ semanage fcontext -l | grep httpd_log_t
/var/log/httpd(/.)?                               all files          system_u:object_r:httpd_log_t:s0  
/var/log/nginx(/.)?                               all files          system_u:object_r:httpd_log_t:s0 
...
</code></pre>
<h2 id="prioritizing-and-disabling-selinux-policy-modules">Prioritizing And Disabling SELinux Policy Modules</h2>
<p>Install the module with the <code>semodule -i</code> command and set the priority of the module to 400</p>
<pre><code class="language-bash">$ semodule -X 400 -i sandbox.pp
$ semodule --list-modules=full | grep sandbox
400 sandbox pp
100 sandbox pp
</code></pre>
<p>Disabling a System Policy Module</p>
<pre><code class="language-bash">semodule -d sandbox
</code></pre>
<h2 id="writing-selinux-policy">Writing SELinux Policy</h2>
<p>The Guide to Writing SELinux Policy</p>
<blockquote>
<p>https://www.linuxtopia.org/online_books/writing_SELinux_policy_guide</p>
</blockquote>
<p>SELinux Policy for Container Runtimes</p>
<blockquote>
<p>https://github.com/containers/container-selinux</p>
</blockquote>
<h2 id="understanding-denials">Understanding Denials</h2>
<p>When SELinux prevents any software from accessing a particular resource, it generates a message and logs it in <code>/var/log/audit/audit.log</code> or <code>/var/log/messages</code> if <strong>audit</strong> service is disabled.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Daemon</th>
<th style="text-align:left">Log Location</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">auditd on</td>
<td style="text-align:left"><code>/var/log/audit/audit.log</code></td>
</tr>
<tr>
<td style="text-align:left">auditd off; rsyslogd on</td>
<td style="text-align:left"><code>/var/log/messages</code></td>
</tr>
<tr>
<td style="text-align:left">setroubleshootd, rsyslogd, and auditd on</td>
<td style="text-align:left"><code>/var/log/audit/audit.log</code>. Easier-to-read denial messages also sent to <code>/var/log/messages</code></td>
</tr>
</tbody>
</table>
<p>if DAC rules (standard Linux permissions) allow access, check <code>/var/log/messages</code> and <code>/var/log/audit/audit.log</code> for <code>&quot;SELinux is preventing&quot;</code> and <code>&quot;denied&quot;</code> errors respectively. This can be done by running the following commands as the root user:</p>
<pre><code class="language-bash">$ ausearch -m AVC,USER_AVC,SELINUX_ERR -ts today
$ sudo grep &quot;SELinux is preventing&quot; /var/log/messages
$ sudo grep &quot;denied&quot; /var/log/audit/audit.log
$ aureport -a
</code></pre>
<table>
<thead>
<tr>
<th>Searching For Command</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>all denials</td>
<td><code>ausearch -m avc,user_avc,selinux_err,user_selinux_err</code></td>
</tr>
<tr>
<td>denials for that today</td>
<td><code>ausearch -m avc -ts today</code></td>
</tr>
<tr>
<td>denials from the last 10 minutes</td>
<td><code>ausearch -m avc -ts recent</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Terminal Configuration]]></title>
        <id>https://jingwoo.github.io/post/windows-terminal-configuration/</id>
        <link href="https://jingwoo.github.io/post/windows-terminal-configuration/">
        </link>
        <updated>2020-07-15T09:52:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="useful-keyboard-shortcuts-in-windows-terminal">Useful Keyboard Shortcuts in windows terminal</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Command</th>
<th>Shortcuts</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Open a new tab</td>
<td>ctrl+shift+t</td>
</tr>
<tr>
<td style="text-align:left">Open a new pane</td>
<td>alt+shift+d</td>
</tr>
<tr>
<td style="text-align:left">Duplicate tab</td>
<td>ctrl+shift+d</td>
</tr>
<tr>
<td style="text-align:left">Open default settings files</td>
<td>ctrl+alt+,</td>
</tr>
<tr>
<td style="text-align:left">Toggle full screen</td>
<td>f11</td>
</tr>
<tr>
<td style="text-align:left">Open next tab</td>
<td>ctrl+tab</td>
</tr>
<tr>
<td style="text-align:left">Open previous tab</td>
<td>ctrl+shift+tab</td>
</tr>
<tr>
<td style="text-align:left">Open a specific tab</td>
<td>ctrl+alt+1</td>
</tr>
<tr>
<td style="text-align:left">Close pane</td>
<td>ctrl+shift+w</td>
</tr>
<tr>
<td style="text-align:left">Move pane focus</td>
<td>alt+&quot;left&quot;<code>,</code>&quot;right&quot;<code>,</code>&quot;up&quot;<code>,</code>&quot;down&quot;</td>
</tr>
<tr>
<td style="text-align:left">Resize a pane</td>
<td>alt+shift+&quot;left&quot;<code>,</code>&quot;right&quot;<code>,</code>&quot;up&quot;<code>,</code>&quot;down&quot;</td>
</tr>
</tbody>
</table>
<h2 id="set-up-powerline-in-windows-terminal">Set up Powerline in Windows Terminal</h2>
<h3 id="set-up-powerline-in-powershell">Set up Powerline in PowerShell</h3>
<pre><code class="language-bash"># Run PowerShell as administrator
Install-Module posh-git -Scope CurrentUser
Install-Module oh-my-posh -Scope CurrentUser
Install-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck
</code></pre>
<h3 id="customize-your-powershell-prompt">Customize your PowerShell prompt</h3>
<pre><code class="language-bash">$ notepad $PROFILE
	Import-Module posh-git
	Import-Module oh-my-posh
	Set-Theme Paradox
</code></pre>
<h2 id="customize-windows-terminal-profile-settings">Customize Windows Terminal Profile Settings</h2>
<pre><code class="language-json">// This file was initially generated by Windows Terminal 1.0.1401.0
// It should still be usable in newer versions, but newer versions might have additional
// settings, help text, or changes that you will not see unless you clear this file
// and let us generate a new one for you.

// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.
// For documentation on these settings, see: https://aka.ms/terminal-documentation
{
    &quot;$schema&quot;: &quot;https://aka.ms/terminal-profiles-schema&quot;,

    &quot;defaultProfile&quot;: &quot;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&quot;,

    // You can add more global application settings here.
    // To learn more about global settings, visit https://aka.ms/terminal-global-settings

    // If enabled, selections are automatically copied to your clipboard.
    &quot;copyOnSelect&quot;: true,

    // If enabled, formatted data is also copied to your clipboard
    &quot;copyFormatting&quot;: false,

    &quot;theme&quot;: &quot;dark&quot;,

    &quot;alwaysShowTabs&quot;: false,

    &quot;showTabsInTitlebar&quot;: true,

    &quot;confirmCloseAllTabs&quot;: true,

    &quot;wordDelimiters&quot;: &quot; ./\\()\&quot;'-:,.;&lt;&gt;~!@#$%^&amp;*|+=[]{}~?│&quot;,

    &quot;snapToGridOnResize&quot;: true,

    // A profile specifies a command to execute paired with information about how it should look and feel.
    // Each one of them will appear in the 'New Tab' dropdown,
    //   and can be invoked from the commandline with `wt.exe -p xxx`
    // To learn more about profiles, visit https://aka.ms/terminal-profile-settings
    &quot;profiles&quot;:
    {
        &quot;defaults&quot;:
        {
            // Put settings here that you want to apply to all profiles.
            &quot;padding&quot;: &quot;0, 0, 0, 0&quot;
        },
        &quot;list&quot;:
        [
            {
                // Make changes here to the powershell.exe profile.
                &quot;guid&quot;: &quot;{61c54bbd-c2c6-5271-96e7-009a87ff44bf}&quot;,
                &quot;name&quot;: &quot;Windows PowerShell&quot;,
                &quot;commandline&quot;: &quot;powershell.exe&quot;,
                &quot;hidden&quot;: false,
                &quot;acrylicOpacity&quot;: 0.7,
                &quot;colorScheme&quot; : &quot;Frost&quot;,
                &quot;cursorColor&quot; : &quot;#000000&quot;,
                &quot;fontFace&quot;: &quot;Cascadia Code PL&quot;,
                &quot;useAcrylic&quot;: true
            },
            {
                &quot;name&quot;: &quot;Ubuntu-20.04&quot;,
                &quot;tabTitle&quot;: &quot;Ubuntu 💻&quot;,
                &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,
                &quot;colorScheme&quot;: &quot;Solarized Dark&quot;,
                &quot;startingDirectory&quot;: &quot;//wsl$/Ubuntu-20.04/root&quot;,
                &quot;guid&quot;: &quot;{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}&quot;,
                &quot;fontFace&quot;: &quot;Consolas&quot;,
                &quot;padding&quot;: &quot;0, 0, 0, 0&quot;,
                &quot;antialiasingMode&quot;: &quot;grayscale&quot;,
                &quot;cursorShape&quot;: &quot;bar&quot;,
                &quot;scrollbarState&quot;: &quot;hidden&quot;,
                &quot;historySize&quot;: 9001,
                &quot;closeOnExit&quot;: &quot;graceful&quot;,
                &quot;hidden&quot;: false,
                // &quot;experimental.retroTerminalEffect&quot;: true,
                &quot;acrylicOpacity&quot;: 0.8,
                &quot;useAcrylic&quot;: true
            },
            {
                &quot;acrylicOpacity&quot; : 0.5,
                &quot;closeOnExit&quot; : true,
                &quot;colorScheme&quot; : &quot;One Half Dark&quot;,
                &quot;commandline&quot; : &quot;ssh root@ip&quot;,
                &quot;cursorColor&quot; : &quot;#FFFFFF&quot;,
                &quot;cursorShape&quot; : &quot;bar&quot;,
                &quot;fontFace&quot; : &quot;Consolas&quot;,
                &quot;fontSize&quot; : 14,
                &quot;guid&quot; : &quot;{592D0432-1020-4DF6-83D4-928A7BE1D31A}&quot;,
                &quot;historySize&quot; : 9001,
                &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/{9acb9455-ca41-5af7-950f-6bca1bc9722f}.png&quot;,
                &quot;name&quot; : &quot;xxxx&quot;,
                &quot;snapOnInput&quot; : true,
                &quot;startingDirectory&quot; : &quot;&quot;,
                &quot;useAcrylic&quot; : false
            }
        ]
    },

    // Add custom color schemes to this array.
    // To learn more about color schemes, visit https://aka.ms/terminal-color-schemes
    &quot;schemes&quot;: [
        {
            &quot;name&quot; : &quot;Frost&quot;,
            &quot;background&quot; : &quot;#FFFFFF&quot;,
            &quot;black&quot; : &quot;#3C5712&quot;,
            &quot;blue&quot; : &quot;#17b2ff&quot;,
            &quot;brightBlack&quot; : &quot;#749B36&quot;,
            &quot;brightBlue&quot; : &quot;#27B2F6&quot;,
            &quot;brightCyan&quot; : &quot;#13A8C0&quot;,
            &quot;brightGreen&quot; : &quot;#89AF50&quot;,
            &quot;brightPurple&quot; : &quot;#F2A20A&quot;,
            &quot;brightRed&quot; : &quot;#F49B36&quot;,
            &quot;brightWhite&quot; : &quot;#741274&quot;,
            &quot;brightYellow&quot; : &quot;#991070&quot;,
            &quot;cyan&quot; : &quot;#3C96A6&quot;,
            &quot;foreground&quot; : &quot;#000000&quot;,
            &quot;green&quot; : &quot;#6AAE08&quot;,
            &quot;purple&quot; : &quot;#991070&quot;,
            &quot;red&quot; : &quot;#8D0C0C&quot;,
            &quot;white&quot; : &quot;#6E386E&quot;,
            &quot;yellow&quot; : &quot;#991070&quot;
        }
    ],

    // Add custom keybindings to this array.
    // To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.
    // To learn more about keybindings, visit https://aka.ms/terminal-keybindings
    &quot;keybindings&quot;:
    [
        // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.
        // These two lines additionally bind them to Ctrl+C and Ctrl+V.
        // To learn more about selection, visit https://aka.ms/terminal-selection
        { &quot;command&quot;: {&quot;action&quot;: &quot;copy&quot;, &quot;singleLine&quot;: false }, &quot;keys&quot;: &quot;ctrl+c&quot; },
        { &quot;command&quot;: &quot;paste&quot;, &quot;keys&quot;: &quot;ctrl+v&quot; },

        // Press Ctrl+Shift+F to open the search box
        { &quot;command&quot;: &quot;find&quot;, &quot;keys&quot;: &quot;ctrl+shift+f&quot; },

        // Press Alt+Shift+D to open a new pane.
        // - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.
        // - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane's profile.
        // To learn more about panes, visit https://aka.ms/terminal-panes
        { &quot;command&quot;: { &quot;action&quot;: &quot;splitPane&quot;, &quot;split&quot;: &quot;auto&quot;, &quot;splitMode&quot;: &quot;duplicate&quot; }, &quot;keys&quot;: &quot;alt+shift+d&quot; }
    ]
}

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Development Environment Configuration for iSulad]]></title>
        <id>https://jingwoo.github.io/post/linux-development-environment-configuration-for-isulad/</id>
        <link href="https://jingwoo.github.io/post/linux-development-environment-configuration-for-isulad/">
        </link>
        <updated>2020-07-12T07:12:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="virtual-machine-installation">Virtual machine installation</h2>
<pre><code class="language-bash">qemu-img create -f raw -o size=120G Fedora_Server.img
virsh dumpxml {guest-id, guestname or uuid} &gt; Fedora_Server.xml
virsh define Fedora_Server.xml
virsh start Fedora_Server
virsh vncdisplay Fedora_Server
</code></pre>
<h2 id="network-configuration">Network Configuration</h2>
<pre><code class="language-bash">vim /etc/sysconfig/network-scripts/ifcfg-ens3
systemctl enable NetworkManager
systemctl start NetworkManager
proxy
</code></pre>
<h2 id="awesome-tools-installation">Awesome Tools Installation</h2>
<pre><code class="language-bash">dnf upgrade -y 
dnf autoremove -y
dnf install -y vim htop the_silver_searcher fd-find bat exa ccze git tig 
dnf install -y fzf glances tmux ShellCheck ranger aria2 axel cloc task jq zsh npm
dnf install -y cmatrix screenfetch mariadb-server mariadb mycli
</code></pre>
<pre><code class="language-bash">git config --global user.name username
git config --global user.email email@xxx.com
git config --global http.sslVerify false

dnf install npm
npm install -g diff-so-fancy
git config --global core.pager &quot;diff-so-fancy | less --tabs=4 -RFX&quot;
git config --global color.ui true
git config --global color.diff-highlight.oldNormal    &quot;red bold&quot;
git config --global color.diff-highlight.oldHighlight &quot;red bold 52&quot;
git config --global color.diff-highlight.newNormal    &quot;green bold&quot;
git config --global color.diff-highlight.newHighlight &quot;green bold 22&quot;

git config --global color.diff.meta       &quot;11&quot;
git config --global color.diff.frag       &quot;magenta bold&quot;
git config --global color.diff.commit     &quot;yellow bold&quot;
git config --global color.diff.old        &quot;red bold&quot;
git config --global color.diff.new        &quot;green bold&quot;
git config --global color.diff.whitespace &quot;red reverse&quot;
git config --bool --global diff-so-fancy.markEmptyLines false
git config --bool --global diff-so-fancy.changeHunkIndicators false
git config --bool --global diff-so-fancy.stripLeadingSymbols false
git config --bool --global diff-so-fancy.useUnicodeRuler false
git config --global diff-so-fancy.rulerWidth 47    # git log's commit header width
</code></pre>
<pre><code class="language-bash">sh -c &quot;$(curl -kfsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
cat ~/.zshrc
plugins=(git zsh-autosuggestions extract zsh-syntax-highlighting history-substring-search history zsh-256color vi-mode z wd taskwarrior)
# git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
# git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
# git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
# cd $ZSH_CUSTOM/plugins &amp;&amp; git clone https://github.com/chrissicool/zsh-256color

vim plugins/history-substring-search/history-substring-search.plugin.zsh
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

vim plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
typeset -g ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=3'

git clone https://github.com/junegunn/fzf.git
./install
vim ~/.zshrc
[ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND='fd --hidden --follow -E &quot;.git&quot; -E &quot;node_modules&quot; . /etc /home'
export FZF_DEFAULT_OPTS='--height 90% --layout=reverse --bind=alt-j:down,alt-k:up,alt-i:toggle+down --border --preview &quot;(bat --style=numbers --color=always {}) 2&gt; /dev/null | head -500&quot; --preview-window=down'

# use fzf in bash and zsh
# Use ~~ as the trigger sequence instead of the default **
# export FZF_COMPLETION_TRIGGER=' f'
#

# Options to fzf command
#export FZF_COMPLETION_OPTS=''
#

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
#
_fzf_compgen_path() {
  fd --hidden --follow -E &quot;.git&quot; -E &quot;node_modules&quot; . /etc /home
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow -E &quot;.git&quot; -E &quot;node_modules&quot; . /etc /home
}

</code></pre>
<pre><code class="language-bash">dnf install -y ctags cscope global
dnf install -y neovim
pip2 install --no-cache-dir --upgrade --force-reinstall neovim
pip3 install --no-cache-dir --upgrade --force-reinstall neovim


vim ~/.zshrc
alias vi='nvim'
alias vim='nvim'

curl -ksLf https://spacevim.org/install.sh | bash
cat ~/.SpaceVim.d/init.toml
[options]
    # set spacevim theme. by default colorscheme layer is not loaded,
    # if you want to use more colorscheme, please load the colorscheme
    # layer
    # colorscheme = &quot;gruvbox&quot;
    colorscheme = &quot;NeoSolarized&quot;
    colorscheme_bg = &quot;dark&quot;
    # Disable guicolors in basic mode, many terminal do not support 24bit
    # true colors
    enable_guicolors = true
    # Disable statusline separator, if you want to use other value, please
    # install nerd fonts
    statusline_separator = &quot;arrow&quot;
    statusline_inactive_separator = &quot;bar&quot;
    buffer_index_type = 4
    windows_index_type = 3
    enable_statusline_mode = true
     # left sections of statusline
    statusline_left_sections = [
       'winnr',
       'major mode',
       'filename',
       'fileformat',
       'minor mode lighters',
       'version control info',
       'search status'
    ]
    # right sections of statusline
    statusline_right_sections = [
       'cursorpos',
       'percentage',
       'input method',
       'date',
       'time'
    ]

    enable_tabline_filetype_icon = true
    enable_statusline_display_mode = true
    statusline_unicode_symbols = true
    realtime_leader_guide = 1
    enable_statusline_tag = true
    # Enable vim compatible mode, avoid changing origin vim key bindings
    vimcompatible = true
    automatic_update = true
    enable_neomake = false
    # enable_ale = true
    filemanager = &quot;defx&quot;
    # enable_ycm = 1
    # autocomplete_method = &quot;coc&quot;

# Enable autocomplete layer
# [[layers]]
# name = 'autocomplete'
# autocomplete_method = &quot;ycm&quot;
# auto-completion-return-key-behavior = &quot;complete&quot;
# auto-completion-tab-key-behavior = &quot;smart&quot;
# enable = false

[[custom_plugins]]
  name = 'neoclide/coc.nvim'
  merge = 0
  build =  'yarn install --frozen-lockfile'

# [[layers]]
  # name = 'lsp'
  # filetypes = [
    # 'c',
    # 'cpp'
  # ]

# [layers.override_cmd]
  # c = ['ccls', '--log-file=/tmp/ccls.log']
  # cpp = ['ccls', '--log-file=/tmp/ccls.log']

[[layers]]
name = 'shell'
default_position = 'right'

# [[layers]]
# name = &quot;cscope&quot;

[[layers]]
name = &quot;VersionControl&quot;
enable-gtm-status = true

[[layers]]
name = &quot;checkers&quot;
show_cursor_error = false

[[layers]]
 name = &quot;colorscheme&quot;

# [[layers]]
# name = &quot;debug&quot;

# [[layers]]
# name = &quot;floobits&quot;

# [[layers]]
# name = &quot;fzf&quot;

[[layers]]
name = &quot;git&quot;
git-plugin = &quot;fugitive&quot;

# [[layers]]
#   name = &quot;lang#c&quot;
#   clang_executable = &quot;/usr/bin/clang&quot;
#   [layer.clang_std]
#     c = &quot;c11&quot;
#     cpp = &quot;c++1z&quot;

# [[layers]]
# name = &quot;lang#go&quot;

[[layers]]
  name = &quot;tmux&quot;
  # tmux_navigator_modifier = &quot;alt&quot;

[[layers]]
  name = &quot;leaderf&quot;

[[layers]]
  name = &quot;sudo&quot;

[[layers]]
  name = &quot;tags&quot;

[[layers]]
 name = &quot;tools&quot;

[[layers]]
 name = 'core'
 # filetree_show_hidden = true

# [[layers]]
#  name = &quot;core#statusline&quot;
#  enable = false

[[layers]]
  name = &quot;ui&quot;
  enable_sidebar = true

# [[layers]]
# name = &quot;gtags&quot;
# gtagslabel = &quot;ctags&quot;

# [custom_plugins]]
# name = &quot;Shougo/dein.vim&quot;

# [[custom_plugins]]
  # name = 'liuchengxu/vista.vim'
</code></pre>
<pre><code class="language-bash">set tabstop=4
set expandtab
set shiftwidth=4
nnoremap &lt;F9&gt; :set invpaste paste?&lt;CR&gt;
set pastetoggle=&lt;F9&gt;
set showmode
set cmdheight=1

&quot; let g:EasyMotion_do_mapping = 1

&quot; filetype plugin indent on
&quot; syntax enable
&quot;
&quot; Default value is &quot;normal&quot;, Setting this option to &quot;high&quot; or &quot;low&quot; does use the
&quot; same Solarized palette but simply shifts some values up or down in order to
&quot; expand or compress the tonal range displayed.
let g:neosolarized_contrast = &quot;normal&quot;

&quot; Special characters such as trailing whitespace, tabs, newlines, when displayed
&quot; using &quot;:set list&quot; can be set to one of three levels depending on your needs.
&quot; Default value is &quot;normal&quot;. Provide &quot;high&quot; and &quot;low&quot; options.
let g:neosolarized_visibility = &quot;normal&quot;

&quot; I make vertSplitBar a transparent background color. If you like the origin
&quot; solarized vertSplitBar style more, set this value to 0.
let g:neosolarized_vertSplitBgTrans = 1

&quot; If you wish to enable/disable NeoSolarized from displaying bold, underlined
&quot; or italicized&quot; typefaces, simply assign 1 or 0 to the appropriate variable.
&quot; Default values:
let g:neosolarized_bold = 1
let g:neosolarized_underline = 1
let g:neosolarized_italic = 0

&quot; Used to enable/disable &quot;bold as bright&quot; in Neovim terminal. If colors of bold
&quot; text output by commands like `ls` aren't what you expect, you might want to
&quot; try disabling this option. Default value:
let g:neosolarized_termBoldAsBright = 1
</code></pre>
<pre><code class="language-bash"># coc.nvim config
reference: https://github.com/neoclide/coc.nvim
https://github.com/neoclide/coc.nvim/wiki
https://github.com/MaskRay/ccls/wiki
https://clangd.llvm.org/

# configurate for coc.nvim
Open config file with command :CocConfig
{
  &quot;languageserver&quot;: {
    &quot;ccls&quot;: {
      &quot;command&quot;: &quot;ccls&quot;,
      &quot;filetypes&quot;: [&quot;c&quot;, &quot;cpp&quot;, &quot;cuda&quot;, &quot;objc&quot;, &quot;objcpp&quot;],
      &quot;rootPatterns&quot;: [&quot;.ccls-root&quot;, &quot;compile_commands.json&quot;],
      &quot;initializationOptions&quot;: {
        &quot;cache&quot;: {
          &quot;directory&quot;: &quot;.ccls-cache&quot;
        },
        &quot;client&quot;: {
          &quot;snippetSupport&quot;: true
        }
      }
    }
  }
}

#Set project for coc.nvim(compile_commands.json and .ccls)
cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
ln -s Debug/compile_commands.json .

cat .ccls
%compile_commands.json
%c -std=c11
%cpp -std=c++14
%c %cpp -pthread
%h %hpp --include=Global.h
-Iinc
</code></pre>
<pre><code class="language-bash">cd ~/.cache/vimfiles/repos/github.com/Valloric/YouCompleteMe
git submodule update --init --recursive
dnf install -y cmake python3-devel gcc-c++ clang golang
python3 install.py --clang-completer

cd /root/.SpaceVim
-----------------------------------------------
modified: config/plugins_before/YouCompleteMe.vim
-----------------------------------------------
@@ -1,4 +1,4 @@
-&quot;let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
+let g:ycm_global_ycm_extra_conf = '~/.cache/vimfiles/repos/github.com/Valloric/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
 &quot;let g:ycm_confirm_extra_conf = 0
 let g:ycm_collect_identifiers_from_tags_files =
       \ get(g:, 'ycm_collect_identifiers_from_tags_files', 1)
-----------------------------------------------
modified: vimrc
-----------------------------------------------
@@ -25,3 +25,9 @@ if 1
     execute 'source' fnamemodify(expand('&lt;sfile&gt;'), ':h').'/config/main.vim'
 endif

cat ~/.Spacevim/vimrc
 &quot; vim:set et sw=2
+set tabstop=4
+set expandtab
+set shiftwidth=4
+nnoremap &lt;F9&gt; :set invpaste paste?&lt;CR&gt;
+set pastetoggle=&lt;F9&gt;
+set showmode

vim ~/.cache/vimfiles/repos/github.com/Valloric/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py
-----------------------------------------------
modified: .ycm_extra_conf.py
-----------------------------------------------
@@ -85,6 +85,18 @@ get_python_inc(),
 'cpp/ycm/tests/gmock/include',
 '-isystem',
 'cpp/ycm/benchmarks/benchmark/include',
+'-I',
+'/usr/local/include',
+'-I',
+'/usr/include',
+'-isystem',
+'/usr/lib/gcc/x86_64-redhat-linux/9/include',
+'-isystem',
+'/usr/include/c++/9',
+'-isystem',
+'/usr/include/c++/9/bits',
+'-isystem',
+'/usr/include/linux',
 ]

# oh-my-tmux
$ cd
$ git clone https://github.com/gpakosz/.tmux.git
$ ln -s -f .tmux/.tmux.conf
$ cp .tmux/.tmux.conf.local .

dnf install -y tmuxinator
echo &quot;export EDITOR='vim'&quot; &gt;&gt; ~/.zshrc
echo &quot;source ~/.bin/.tmuxinator.zsh&quot; &gt;&gt; ~/.zshrc
cat ~/.bin/.tmuxinator.zsh
#compdef _tmuxinator tmuxinator

_tmuxinator() {
  local commands projects
  commands=(${(f)&quot;$(tmuxinator commands zsh)&quot;})
  projects=(${(f)&quot;$(tmuxinator completions start)&quot;})

  if (( CURRENT == 2 )); then
    _alternative \
      'commands:: _describe -t commands &quot;tmuxinator subcommands&quot; commands' \
      'projects:: _describe -t projects &quot;tmuxinator projects&quot; projects'
  elif (( CURRENT == 3)); then
    case $words[2] in
      copy|cp|c|debug|delete|rm|open|o|start|s|edit|e)
        _arguments '*:projects:($projects)'
      ;;
    esac
  fi

  return
}

complete -F _tmuxinator tmuxinator mux
alias mux=&quot;tmuxinator&quot;
# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et

tmuxinator new YOUR_PROJECT
tmuxinator edit YOUR_PROJECT
tmuxinator start YOUR_PROJECT
tmuxinator stop YOUR_PROJECT

vim ~/.tmux.conf
...
# replace C-b by C-a instead of using both prefixes
set-option -g prefix2 `

unbind '&quot;'
bind - splitw -v
unbind %
bind | splitw -h
# move status line to top
set -g status-position bottom

cd ~/.tmux
mkdir plugins
git clone https://github.com/tmux-plugins/tmux-resurrect.git
cd ~/.tmux/plugins
git clone https://github.com/tmux-plugins/tmux-continuum.git

run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux

vim  ~/.tmux.conf
...
# set -g @continuum-save-interval '1440'
set -g @continuum-save-interval '0'
set -g @continuum-restore 'on'
</code></pre>
<h2 id="terminal-true-color-support">terminal true-color support</h2>
<p>xshell tools - configuation - advance - select using true-color<br>
reference：https://github.com/icymind/NeoSolarized<br>
https://gist.github.com/XVilka/8346728</p>
<p>code font: JetBrains Mono/Cascadia Code/Consolas<br>
https://www.jetbrains.com/lp/mono/</p>
<p>dnf install -y ccls bear<br>
if failed to install coc.nvim, execute <code>yarn config set &quot;strict-ssl&quot; false -g</code></p>
<p>[coc.nvim] error: Some plugin change completeopt on insert mode<br>
rm -rf <code>find ~ -name 'deoplete*'</code></p>
<h2 id="start-isulad-on-high-fedora-version-eg31">start iSulad on high Fedora version (eg:31)</h2>
<pre><code class="language-bash"># sudo grubby --update-kernel=ALL --args=&quot;systemd.unified_cgroup_hierarchy=0&quot;    # use cgroup v1
# sudo grubby --update-kernel=ALL --args=&quot;systemd.unified_cgroup_hierarchy=1&quot;    # use cgroup v2

$ sudo dnf install -y grubby
$ sudo grubby --update-kernel=ALL --args=&quot;systemd.unified_cgroup_hierarchy=0&quot;
$ sudo reboot
</code></pre>
<h2 id="developingdebuging-isulad">Developing/Debuging iSulad</h2>
<pre><code class="language-bash">dnf install valgrind gdb gdb-gdbserver tcpdump ystemtap ltrace strace
dnf group install 'Development Tools' 
dnf install gcc rpm-build rpm-devel rpmlint make python bash coreutils diffutils patch rpmdevtools

ulimit -c unlimited
echo &quot;1&quot; &gt; /proc/sys/kernel/core_uses_pid
echo &quot;/corefile/core-%e-%p-%t&quot; &gt; /proc/sys/kernel/core_pattern

valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --leak-resolution=high --show-reachable=yes --log-file=valgrind_memcheck.log -v isulad
</code></pre>
<h3 id="isulad-network-debug">iSulad Network Debug</h3>
<pre><code class="language-bash">openssl x509 -in cert.pem -noout -text
./testssl.sh IP:port
sslscan --tlsall IP:port
openssl s_client -connect IP:port
tcpdump port $port
tcpdump -i xxx port $port
tshark -i xxx
</code></pre>
<h2 id=""></h2>
]]></content>
    </entry>
</feed>